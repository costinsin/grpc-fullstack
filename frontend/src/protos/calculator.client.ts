// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "calculator.proto" (package "calculator", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Calculator } from "./calculator";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { AddResponse } from "./calculator";
import type { AddRequest } from "./calculator";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service calculator.Calculator
 */
export interface ICalculatorClient {
    /**
     * @generated from protobuf rpc: Add(calculator.AddRequest) returns (calculator.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse>;
}
/**
 * @generated from protobuf service calculator.Calculator
 */
export class CalculatorClient implements ICalculatorClient, ServiceInfo {
    typeName = Calculator.typeName;
    methods = Calculator.methods;
    options = Calculator.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Add(calculator.AddRequest) returns (calculator.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddRequest, AddResponse>("unary", this._transport, method, opt, input);
    }
}
