// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "calculator.proto" (package "calculator", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message calculator.AddRequest
 */
export interface AddRequest {
    /**
     * @generated from protobuf field: int32 a = 1;
     */
    a: number;
    /**
     * @generated from protobuf field: int32 b = 2;
     */
    b: number;
}
/**
 * @generated from protobuf message calculator.AddResponse
 */
export interface AddResponse {
    /**
     * @generated from protobuf field: int32 result = 1;
     */
    result: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class AddRequest$Type extends MessageType<AddRequest> {
    constructor() {
        super("calculator.AddRequest", [
            { no: 1, name: "a", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "b", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AddRequest>): AddRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = 0;
        message.b = 0;
        if (value !== undefined)
            reflectionMergePartial<AddRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddRequest): AddRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 a */ 1:
                    message.a = reader.int32();
                    break;
                case /* int32 b */ 2:
                    message.b = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 a = 1; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).int32(message.a);
        /* int32 b = 2; */
        if (message.b !== 0)
            writer.tag(2, WireType.Varint).int32(message.b);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message calculator.AddRequest
 */
export const AddRequest = new AddRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddResponse$Type extends MessageType<AddResponse> {
    constructor() {
        super("calculator.AddResponse", [
            { no: 1, name: "result", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AddResponse>): AddResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<AddResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddResponse): AddResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message calculator.AddResponse
 */
export const AddResponse = new AddResponse$Type();
/**
 * @generated ServiceType for protobuf service calculator.Calculator
 */
export const Calculator = new ServiceType("calculator.Calculator", [
    { name: "Add", options: {}, I: AddRequest, O: AddResponse }
]);
